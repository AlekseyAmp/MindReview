"""add tables

Revision ID: d3831daf19a4
Revises:
Create Date: 2024-03-01 07:51:49.207321+00:00

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd3831daf19a4'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        "ALTER DATABASE mindreview SET timezone TO 'Asia/Yekaterinburg';"
    )
    op.execute("CREATE schema common;")
    op.execute("CREATE schema data;")
    op.execute("CREATE schema logs;")
    op.create_table(
        'users',
        sa.Column(
            'id',
            sa.Integer(),
            nullable=False,
            comment='Уникальный идентификатор пользователя'),
        sa.Column(
            'dt',
            sa.DateTime(),
            nullable=False,
            comment='Дата регистрации пользователя'),
        sa.Column(
            'first_name',
            sa.String(),
            nullable=False,
            comment='Имя пользователя'),
        sa.Column(
            'last_name',
            sa.String(),
            nullable=False,
            comment='Фамилия пользователя'),
        sa.Column(
            'email',
            sa.String(),
            nullable=False,
            comment='Адрес электронной почты пользователя'),
        sa.Column(
            'password',
            sa.String(),
            nullable=False,
            comment='Пароль пользователя'),
        sa.Column(
            'role',
            postgresql.ENUM(
                'user',
                'admin',
                name='user_role_enum'),
            nullable=False,
            comment='Роль пользователя'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
        schema='common',
        comment='Таблица, содержащая информацию о пользователях')
    op.create_table(
        'cities',
        sa.Column(
            'id',
            sa.Integer(),
            nullable=False,
            comment='Уникальный идентификатор города'),
        sa.Column(
            'dt',
            sa.DateTime(),
            nullable=False,
            comment='Дата добавления города'),
        sa.Column(
            'name',
            sa.String(),
            nullable=False,
            comment='Название города'),
        sa.PrimaryKeyConstraint('id'),
        schema='data',
        comment='Список городов для распознавания города в отзыве')
    op.create_table(
        'stopwords',
        sa.Column(
            'id',
            sa.Integer(),
            nullable=False,
            comment='Уникальный идентификатор стоп-слова'),
        sa.Column(
            'dt',
            sa.DateTime(),
            nullable=False,
            comment='Дата добавления стоп-слова'),
        sa.Column(
            'word',
            sa.String(),
            nullable=False,
            comment='Стоп-слово'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('word'),
        schema='data',
        comment='Таблица стоп-слов для фильтрации текстов')
    op.create_table(
        'logs',
        sa.Column(
            'id',
            sa.Integer(),
            nullable=False,
            comment='Уникальный идентификатор лога'),
        sa.Column(
            'dt',
            sa.DateTime(),
            nullable=False,
            comment='Метка времени лога'),
        sa.Column(
            'level',
            sa.String(),
            nullable=False,
            comment='Уровень важности лога'),
        sa.Column(
            'message',
            sa.Text(),
            nullable=False,
            comment='Сообщение лога'),
        sa.PrimaryKeyConstraint('id'),
        schema='logs',
        comment='Таблица, содержащая логи приложения.')
    op.create_table(
        'analyze',
        sa.Column(
            'id',
            sa.Integer(),
            nullable=False,
            comment='Уникальный идентификатор результата анализа'),
        sa.Column(
            'user_id',
            sa.Integer(),
            nullable=False,
            comment='Идентификатор пользователя'),
        sa.Column(
            'dt',
            sa.DateTime(),
            nullable=False,
            comment='Дата загрузки отзывов'),
        sa.Column(
            'source_type',
            postgresql.ENUM(
                'test',
                'file',
                'website',
                name='source_type_enum'),
            nullable=False,
            comment='Тип источника (тест, файл или сайт)'),
        sa.Column(
            'source_url',
            sa.Text(),
            nullable=True,
            comment='Ссылка на источник'),
        sa.Column(
            'entries_analyze',
            postgresql.ARRAY(
                postgresql.JSONB(
                    astext_type=sa.Text())),
            nullable=True,
            comment='Список результатов анализа по каждому отзыву'),
        sa.Column(
            'full_analyze',
            postgresql.JSONB(
                astext_type=sa.Text()),
            nullable=True,
            comment='Общий результат анализа по всем отзывам'),
        sa.Column(
            'status',
            postgresql.ENUM(
                'complete',
                'error',
                name='status_enum'),
            nullable=True,
            comment='Статус анализа (выполнен, ошибка)'),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['common.users.id'],
            name='common.analyze_user_id_fk',
            onupdate='CASCADE',
            ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        schema='common',
        comment='Таблица, содержащая результаты анализа отзывов')
    op.create_table(
        'feedbacks',
        sa.Column(
            'id',
            sa.Integer(),
            nullable=False,
            comment='Уникальный идентификатор обратной связи'),
        sa.Column(
            'user_id',
            sa.Integer(),
            nullable=False,
            comment='Идентификатор пользователя'),
        sa.Column(
            'dt',
            sa.DateTime(),
            nullable=False,
            comment='Дата отправки сообщения от пользователя'),
        sa.Column(
            'response_dt',
            sa.DateTime(),
            nullable=True,
            comment='Дата отправки сообщения от службы поддержки'),
        sa.Column(
            'message',
            sa.Text(),
            nullable=False,
            comment='Сообщение от пользователя'),
        sa.Column(
            'response',
            sa.Text(),
            nullable=True,
            comment='Ответ от службы поддержки'),
        sa.Column(
            'sender_email',
            sa.String(),
            nullable=False,
            comment='Email отправителя'),
        sa.Column(
            'recipient_email',
            sa.String(),
            nullable=False,
            comment='Email службы поддержки'),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['common.users.id'],
            name='common.feedbacks_user_id_fk',
            onupdate='CASCADE',
            ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        schema='common',
        comment='Таблица, содержащая информацию об обратной связи.')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('feedbacks', schema='common')
    op.drop_table('analyze', schema='common')
    op.drop_table('logs', schema='logs')
    op.drop_table('stopwords', schema='data')
    op.drop_table('cities', schema='data')
    op.drop_table('users', schema='common')
    op.execute("DROP TYPE IF EXISTS user_role_enum;")
    op.execute("DROP TYPE IF EXISTS source_type_enum;")
    op.execute("DROP TYPE IF EXISTS status_enum;")
    op.execute("DROP schema logs;")
    op.execute("DROP schema data;")
    op.execute("DROP schema common;")
    # ### end Alembic commands ###
